using DevExpress.XtraBars;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace QLDSV_TC
{
    public partial class frmLtc : DevExpress.XtraEditors.XtraForm
    {
        private SqlConnection conn_publisher = new SqlConnection();
        private bool check_select = false;
        private String mkhoa = "";
        private String hanhDong = "";
        public frmLtc()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard

        }

        private void frmLtc_Load(object sender, EventArgs e)
        {
            dS.EnforceConstraints = false;
            // TODO: This line of code loads data into the 'dS.DANGKY' table. You can move, or remove it, as needed.
            this.dANGKYTableAdapter.Fill(this.dS.DANGKY);
            // TODO: This line of code loads data into the 'dS.LOPTINCHI' table. You can move, or remove it, as needed.
            this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);

            mkhoa = ((DataRowView)LtcBindingSource[0])["MAKHOA"].ToString();
            cbxCN.DataSource = Program.bds_dspm; // sao chép ở frmDangNhap
            cbxCN.DisplayMember = "TENKHOA";
            cbxCN.ValueMember = "TENSERVER";
            cbxCN.SelectedIndex = Program.mKhoa;

            if (KetNoi_CSDLGoc() == 0) return;
            LayDSMH("select * from V_MONHOC");
            LayDSGV("select * from V_GIANGVIEN");

            String maGVBanDau = ((DataRowView)LtcBindingSource[0])["MAGV"].ToString();
            cbxGiangVien.SelectedValue = maGVBanDau;

            String maMHBanDau = ((DataRowView)LtcBindingSource[LtcBindingSource.Position])["MAMH"].ToString();
            cbxMonHoc.SelectedValue = maMHBanDau;

            if (Program.mGroup == "KHOA")
            {
                cbxCN.Enabled = false;
            }
        }

        private void lOPTINCHIBindingNavigatorSaveItem_Click(object sender, EventArgs e)
        {
            this.Validate();
            this.LtcBindingSource.EndEdit();
            this.tableAdapterManager.UpdateAll(this.dS);

        }

        private void cbxCN_SelectedIndexChanged(object sender, EventArgs e)
        {
            // xử lí để không cbx không tự động chọn
            if (cbxCN.SelectedIndex != 0)
            {
                check_select = true;
            }
            //lấy tài khoản login để đăng nhập qua site khác
            if (check_select == true)
            {
                if (cbxCN.SelectedIndex != Program.mKhoa)
                {
                    Program.mlogin = Program.remotelogin;
                    Program.password = Program.remotepassword;
                }
                else
                {
                    Program.mlogin = Program.mloginDN;
                    Program.password = Program.passwordDN;
                }

                Program.servername = cbxCN.SelectedValue.ToString();

                if (Program.KetNoi() == 0)
                {
                    MessageBox.Show("Lỗi kết nối về chi nhánh mới", "", MessageBoxButtons.OK);
                }
                else
                {
                    this.LtcTableAdapter.Connection.ConnectionString = Program.connstr; // Tạo kết nối để sau này thay đổi mật khẩu dữ liệu k bị lỗi
                    this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                }
            }
        }

        private void EnableButton(bool b)
        {
            // phần 1
            gbThem.Enabled = b;
            btnGhi.Enabled = btnHuy.Enabled = b;

            //phần 2
            lOPTINCHIGridControl.Enabled = !b;
            btnThem.Enabled = btnSua.Enabled = btnXoa.Enabled = btnPhucHoi.Enabled = btnLamMoi.Enabled = !b;
            cbxCN.Enabled = !b;
        }

        private void btnThem_ItemClick(object sender, ItemClickEventArgs e)
        {
            mkhoa = ((DataRowView)LtcBindingSource[0])["MAKHOA"].ToString();
            this.LtcBindingSource.AddNew();
            txtMaKhoa.Text = mkhoa;

            this.EnableButton(true);
            hanhDong = "ADD";
        }

        private void btnGhi_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (cbxNienKhoa.Text == "" || txtNhom.Text == "" || txtHocKy.Text == "" ||
                txtMaMH.Text == "" || txtMaGV.Text == "" || txtSVToiThieu.Text == "")
            {
                MessageBox.Show("Vui lòng ghi đầy đủ dữ liệu !!\n", "", MessageBoxButtons.OK);
                return;
            }

            if (hanhDong == "ADD" && CheckLTC() == false) // lớp tín chỉ đã tồn tại
            {
                return;
            }
            try
            {
                this.LtcBindingSource.EndEdit();
                this.LtcBindingSource.ResetCurrentItem();
                this.LtcTableAdapter.Update(this.dS.LOPTINCHI);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi ghi lớp học!!\n" + ex.Message, "", MessageBoxButtons.OK);
            }

            this.EnableButton(false);
        }

        private int KetNoi_CSDLGoc()
        {
            if (conn_publisher != null && conn_publisher.State == ConnectionState.Open)
            {
                conn_publisher.Close();
            }
            try
            {
                conn_publisher.ConnectionString = Program.connstr_publisher;
                conn_publisher.Open();
                return 1;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi kết nối với cơ sở dữ liệu gốc.\n" + ex.Message);
                return 0;
            }
        }

        public void LayDSMH(String cmd)
        {
            DataTable dt = new DataTable();
            if (conn_publisher.State == ConnectionState.Closed) conn_publisher.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd, conn_publisher);
            da.Fill(dt);
            conn_publisher.Close();
            cbxMonHoc.DataSource = dt;
            cbxMonHoc.DisplayMember = "TENMH"; cbxMonHoc.ValueMember = "MAMH";
            //cbxMonHoc.SelectedIndex = 1;
            //cbxMonHoc.SelectedValue = "CTDL";
        }

        public void LayDSGV(String cmd)
        {
            DataTable dt = new DataTable();
            if (conn_publisher.State == ConnectionState.Closed) conn_publisher.Open();
            SqlDataAdapter da = new SqlDataAdapter(cmd, conn_publisher);
            da.Fill(dt);
            conn_publisher.Close();
            cbxGiangVien.DataSource = dt;
            cbxGiangVien.DisplayMember = "HOTEN"; cbxGiangVien.ValueMember = "MAGV";
            //cbxGiangVien.SelectedIndex = 1;
            //cbxGiangVien.SelectedValue = "GV03";
        }

        private void cbxMonHoc_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (btnGhi.Enabled) //khi thêm hoặc sửa mới được thay đổi
            {
                txtMaMH.Text = cbxMonHoc.SelectedValue.ToString();
            }
        }

        private void cbxGiangVien_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (btnGhi.Enabled) //khi thêm hoặc sửa mới được thay đổi
            {
                txtMaGV.Text = cbxGiangVien.SelectedValue.ToString();
            }
        }


        private void txtMaGV_EditValueChanged(object sender, EventArgs e)
        {
            // khi đổ dữ liệu từ GridControl xuống gbThem
            if (btnGhi.Enabled == false)
            {
                String maGV = "";
                if (LtcBindingSource.Position != -1)
                {
                    maGV = ((DataRowView)LtcBindingSource[LtcBindingSource.Position])["MAGV"].ToString();
                }
                cbxGiangVien.SelectedValue = maGV;
            }
        }

        private void txtMaMH_EditValueChanged(object sender, EventArgs e)
        {
            // khi đổ dữ liệu từ GridControl xuống gbThem
            if (btnGhi.Enabled == false)
            {
                String maMH = "";
                if (LtcBindingSource.Position != -1)
                {
                    maMH = ((DataRowView)LtcBindingSource[LtcBindingSource.Position])["MAMH"].ToString();
                }
                cbxMonHoc.SelectedValue = maMH;
            }
        }

        private bool CheckLTC()
        {
            // Kiểm tra trùng mã lớp
            string query1 = "DECLARE  @return_value int \n"
                            + "EXEC @return_value = SP_CHECK_LTC \n"
                            + "@nienkhoa = '" + cbxNienKhoa.Text + "', @hocki = " + txtHocKy.Text + ""
                            + ", @nhom = " + txtNhom.Text + ", @mamh = '" + txtMaMH.Text + "' \n"
                            + "SELECT  'Return Value' = @return_value";
            int resultMa = Program.CheckDataHelper(query1);
            if (resultMa == -1)
            {
                MessageBox.Show("Lỗi kết nối với database. Mời ban xem lại !", "", MessageBoxButtons.OK);
                return false;
            }
            if (resultMa == 1)
            {
                MessageBox.Show("Lớp tín chỉ đã tồn tại ở khoa hiện tại !", "", MessageBoxButtons.OK);
                return false;
            }
            if (resultMa == 2)
            {
                MessageBox.Show("Lớp tín chỉ đã tồn tại ở khoa khác !", "", MessageBoxButtons.OK);
                return false;
            }

            return true;
        }

        private void btnSua_ItemClick(object sender, ItemClickEventArgs e)
        {
            this.EnableButton(true);
            hanhDong = "UPDATE";
        }

        private void btnHuy_ItemClick(object sender, ItemClickEventArgs e)
        {
            this.LtcBindingSource.CancelEdit();
            this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
            EnableButton(false);
        }

        private void btnXoa_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (dANGKYBindingSource.Count > 0)
            {
                MessageBox.Show("Không thể hủy lớp tín chỉ này vì đã có sinh viên đăng kí",
                    "", MessageBoxButtons.OK);
                return;
            }
            if (MessageBox.Show("Bạn có thực sự muốn hủy lớp tín chỉ này ?",
                "Xác nhận", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                try
                {
                    int maLtc = int.Parse(((DataRowView)LtcBindingSource[LtcBindingSource.Position])["MALTC"].ToString());
                    String query = "UPDATE LOPTINCHI SET HUYLOP = 1 WHERE MALTC = " + maLtc + "";
                    SuaDuLieu(query);
                    // load lại dữ liệu
                    this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi xóa lớp tín chỉ của hệ thống. Hãy xóa lại\n" + ex.Message,
                    "", MessageBoxButtons.OK);
                    // Load lại danh sách LTC, vì có thể xóa trên giao diện nhưng chưa xóa trên db
                    this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                    return;
                }
            }
        }

        private void btnLamMoi_ItemClick(object sender, ItemClickEventArgs e)
        {
            try
            {
                this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
            }
            catch (Exception ex)
            {
                MessageBox.Show("Lỗi Reload " + ex.Message, "", MessageBoxButtons.OK);
                return;
            }
        }

        public void SuaDuLieu(String strLenh)
        {

            SqlCommand sqlcmd = new SqlCommand(strLenh, Program.conn);
            sqlcmd.CommandType = CommandType.Text;
            if (Program.conn.State == ConnectionState.Closed) Program.conn.Open();
            try
            {
                sqlcmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Program.conn.Close();
                MessageBox.Show("Lỗi cập nhật dữ liệu \n" + ex.Message, "", MessageBoxButtons.OK);
                return;
            }
        }

        public void LoadLtcDaHuy()
        {
            String sql = "SELECT MALTC, NIENKHOA, HOCKY, MAMH, NHOM, MAGV, MAKHOA, SOSVTOITHIEU, HUYLOP "
                            + "FROM LOPTINCHI WHERE HUYLOP = 1";
            DataTable dt = Program.ExecSqlDataTable(sql);
            this.dgvLtcDaHuy.DataSource = dt;
        }

        private void btnThoat_ItemClick(object sender, ItemClickEventArgs e)
        {
            if (btnGhi.Enabled) // nếu thông tin chưa được ghi
            {
                if (MessageBox.Show("Thông tin chưa được lưu. \n" +
                    "Bạn có thực sự muốn thoát ?",
                    "Xác nhận", MessageBoxButtons.OKCancel) == DialogResult.OK)
                {
                    this.Close();
                }
                else
                {
                    return;
                }
            }
            else
            {
                this.Close();
                return;
            }
        }

        private void cbLtcDaHuy_CheckedChanged(object sender, EventArgs e)
        {
            if (cbLtcDaHuy.Checked)
            {
                LoadLtcDaHuy();
                dgvLtcDaHuy.Visible = true;
                bar1.Visible = true;
                gbThem.Visible = false;
                lOPTINCHIGridControl.Visible = false;
                btnThem.Enabled = btnSua.Enabled = btnXoa.Enabled = btnPhucHoi.Enabled = btnLamMoi.Enabled = btnGhi.Enabled = btnHuy.Enabled = false;
            }
            else
            {
                dgvLtcDaHuy.Visible = false;
                bar1.Visible = false;
                gbThem.Visible = true;
                this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                this.lOPTINCHIGridControl.Visible = true;
                btnThem.Enabled = btnSua.Enabled = btnXoa.Enabled = btnPhucHoi.Enabled = btnLamMoi.Enabled = true;
            }
        }

        private void btnMoLai_ItemClick(object sender, ItemClickEventArgs e)
        {
            //int maLtc = int.Parse(((DataRowView)LtcBindingSource[LtcBindingSource.Position])["MALTC"].ToString());
            //int i =dgvLtcDaHuy.CurrentRow.Index;
            //int maLtc = int.Parse(dgvLtcDaHuy.Rows[i].Cells[0].Value.ToString());

            // Lấy GridView hiện tại của GridControl
            GridView gridView = dgvLtcDaHuy.MainView as GridView;

            // Lấy chỉ số của dòng đang được chọn
            int rowIndex = gridView.FocusedRowHandle;

            // Lấy giá trị của cột "MaSV" tại dòng đang được chọn
            string maLtc = gridView.GetRowCellValue(rowIndex, "MALTC").ToString();

            if (MessageBox.Show("Bạn có muốn mở lại lớp tín chỉ này ?",
                "Xác nhận", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                try
                {

                    String query = "UPDATE LOPTINCHI SET HUYLOP = 0 WHERE MALTC = " + maLtc + "";
                    SuaDuLieu(query);
                    // load lại dữ liệu
                    this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                    LoadLtcDaHuy();
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi mở lại lớp tín chỉ của hệ thống.\n" + ex.Message,
                    "", MessageBoxButtons.OK);
                    // Load lại danh sách LTC, vì có thể xóa trên giao diện nhưng chưa xóa trên db
                    this.LtcTableAdapter.Fill(this.dS.LOPTINCHI);
                    return;
                }
            }
        }
    }
}

/*
 var items = new BindingList<KeyValuePair<string, string>>();

            items.Add(new KeyValuePair<string, string>("N", "NO"));
            items.Add(new KeyValuePair<string, string>("Y", "YES"));

            comboBox1.DataSource = items;
            comboBox1.ValueMember = "Key";
            comboBox1.DisplayMember = "Value";
 */